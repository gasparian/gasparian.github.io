<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>&amp;&gt; /dev/null</title>
    <link>https://gasparian.github.io/</link>
    <description>Recent content on &amp;&gt; /dev/null</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 25 Aug 2022 21:30:04 +0800</lastBuildDate><atom:link href="https://gasparian.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Unikernels</title>
      <link>https://gasparian.github.io/unikernels-simple/</link>
      <pubDate>Sun, 02 Jun 2024 19:31:04 +0200</pubDate>
      
      <guid>https://gasparian.github.io/unikernels-simple/</guid>
      <description>Purpose Unikernels are specialized, single-purpose operating systems designed to run directly on a hypervisor. They are compiled from high-level source code into a standalone kernel that includes only the necessary components to run a specific application.
The main purpose of unikernels is to deploy applications in the cloud more efficiently and securely. By compiling only the required components into a single bootable image, unikernels offer significant reductions in image size, improved performance, and enhanced security compared to traditional operating systems.</description>
    </item>
    
    <item>
      <title>Distroless</title>
      <link>https://gasparian.github.io/distroless/</link>
      <pubDate>Sun, 24 Mar 2024 19:42:52 +0100</pubDate>
      
      <guid>https://gasparian.github.io/distroless/</guid>
      <description>What ML development relies a lot on large computation frameworks like torch / tensorflow and wrappers on top of them and we became kind of locked on Python ecosystem. So we got used to deploy python to production.
For the virtualization, we usually use containers.
It all comes with the cost of bringing lots of dependencies to our application containers, which leads to huge image sizes and lots of security issues (literally thousands, if you don&amp;rsquo;t update python version/libs versions too often).</description>
    </item>
    
    <item>
      <title>Raspberry PI as a VPN server</title>
      <link>https://gasparian.github.io/raspi-vpn/</link>
      <pubDate>Mon, 02 Oct 2023 19:12:58 +0200</pubDate>
      
      <guid>https://gasparian.github.io/raspi-vpn/</guid>
      <description>Disclaimer: All content on this blog is intended for educational purposes only. Only you is liable for any consequences resulting from your use of this information. You should always respect laws of your country.
Intro VPNs are primarily designed to create a secure and encrypted connection between your device and a remote server. This connection can be used to protect online privacy, hide your IP address, access geo-restricted content, and enhance security when connecting to the internet, especially on public Wi-Fi networks.</description>
    </item>
    
    <item>
      <title>cProfile</title>
      <link>https://gasparian.github.io/python-profiling/</link>
      <pubDate>Wed, 03 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gasparian.github.io/python-profiling/</guid>
      <description>There are quite some profiling tools for Python, like popular scalene. But I like python for simplicity and really like to use some &amp;ldquo;default&amp;rdquo; tools from the standard python toolchain - so cProfile is my choice.
It doesn&amp;rsquo;t require fine-grained code annotation and very simple to use.
It shows stats on how much time is spent while executing certain functions. Really easy to work and interpret.
Run For example, the following command will run profiling on each function that is being run inside the main.</description>
    </item>
    
    <item>
      <title>OpenCV CUDA on ðŸ›ž`s</title>
      <link>https://gasparian.github.io/opencv-cuda/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://gasparian.github.io/opencv-cuda/</guid>
      <description>I think we all know opencv - itâ€™s a pretty old yet widely used and performant computer vision library with a lot of useful algorithms. One of the advantages of it - you can configure opencv how you want to get really nice performance gain. One of the ways - compile it to multiply matrices on GPUs to speed up both &amp;ldquo;old&amp;rdquo; CV filters (which are essentially convolutions) and use deep learning inference (yes, you can do it in opencv with the special module added).</description>
    </item>
    
    <item>
      <title>Tensorflow v1 vs v2 inference</title>
      <link>https://gasparian.github.io/tf1-vs-tf2/</link>
      <pubDate>Mon, 04 Jul 2022 00:00:00 +0000</pubDate>
      
      <guid>https://gasparian.github.io/tf1-vs-tf2/</guid>
      <description>In tensorflow 1.0, you had to define your model as a graph, and run it using the following syntax:
with tf.Session(...) as sess: sess.run(...) This piece of code basically compiles a graph and puts it on the device that it should be executed on (CPU/GPU).
While compiling the graph, TensorFlow applies various optimizations, like running parallel branches in separate threads, etc. So, as a result, you could expect a better performance of the resulting model.</description>
    </item>
    
    <item>
      <title>Harmless car hack</title>
      <link>https://gasparian.github.io/car-hack/</link>
      <pubDate>Tue, 14 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://gasparian.github.io/car-hack/</guid>
      <description>Intro If you&amp;rsquo;re driving a car you&amp;rsquo;ve probably seen the On-Board Diagnostics port (OBD for short) under the steering wheel. That is a standardized interface for accessing the vehicle&amp;rsquo;s diagnostic information. It&amp;rsquo;s typically used by mechanics and diagnostic tools to retrieve data related to the engine, transmission, and other essential systems. They usually use some manufacturer-approved hardware. What makes it interesting is that we can read data from almost any major device in the vehicle and even control some of them.</description>
    </item>
    
  </channel>
</rss>
